// SPDX-License-Identifier: MIT LICENSE
pragma solidity ^0.8.9;

import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

import "@openzeppelin/contracts/utils/introspection/ERC165.sol";

import {GAME_LOGIC_CONTRACT_ROLE} from "../Constants.sol";
import {IRandomizer, ID} from "./IRandomizer.sol";
import "../GameRegistryConsumer.sol";

/**
 * Random number generator based off of Chainlink VRFv2
 *
 * This class is based off of ChainLinks reference implementation
 */
contract Randomizer is
    IRandomizer,
    ERC165,
    VRFConsumerBaseV2,
    GameRegistryConsumer
{
    /// @notice Reference to the VRFv2 Coordinator contract
    VRFCoordinatorV2Interface immutable COORDINATOR;

    /// @notice Subscription id, this is the holding account for LINK token and must be funded
    uint64 immutable subscriptionId;

    /// @notice Key-hash for the Chainlink VRF system
    bytes32 internal immutable keyHash;

    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,
    // This also needs to take into account any additional logic executing when the function is called
    uint32 constant callbackGasLimit = 1000000;

    /// @notice The default is 3, but you can set this higher.
    uint16 constant requestConfirmations = 3;

    /// @notice Callback registry for requests
    mapping(uint256 => IRandomizerCallback) internal callbacks;

    /**
     * @param _vrfCoordinator       address of the VRF Coordinator
     * @param _keyHash              bytes32 representing the hash of the VRF job
     * @param _subscriptionId       Id of the subscription to fund VRF requests
     * @param _gameRegistryAddress  Address of the game registry contract
     */
    constructor(
        address _vrfCoordinator,
        bytes32 _keyHash,
        uint64 _subscriptionId,
        address _gameRegistryAddress
    )
        VRFConsumerBaseV2(_vrfCoordinator)
        GameRegistryConsumer(_gameRegistryAddress, ID)
    {
        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        subscriptionId = _subscriptionId;
        keyHash = _keyHash;
    }

    /**
     * Issues a request for random words (uint256 numbers)
     *
     * @param randomizerCallback Callback to run once the words arrive
     * @param numWords           Number of words to request
     */
    function requestRandomWords(
        IRandomizerCallback randomizerCallback,
        uint32 numWords
    )
        external
        virtual
        override
        onlyRole(GAME_LOGIC_CONTRACT_ROLE)
        returns (uint256)
    {
        // Will revert if subscription is not set and funded.
        uint256 requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        callbacks[requestId] = randomizerCallback;

        return requestId;
    }

    /**
     * @param requestId Id of the request to check
     * @return Whether or not a request with the given requestId is pending
     */
    function isRequestPending(uint256 requestId) external view returns (bool) {
        return address(callbacks[requestId]) != address(0);
    }

    /**
     * @inheritdoc IERC165
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(IERC165, ERC165)
        returns (bool)
    {
        return
            interfaceId == type(IRandomizer).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /** INTERNAL */

    /**
     * Callback for when the randomness process has completed
     *
     * @param requestId   Id of the randomness request
     * @param randomWords Words generated by VRF
     */
    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)
        internal
        override
    {
        IRandomizerCallback callbackAddress = callbacks[requestId];
        // Make sure request is valid and then callback
        if (address(callbackAddress) != address(0)) {
            callbackAddress.fulfillRandomWordsCallback(requestId, randomWords);
            delete callbacks[requestId];
        }
    }
}
